from dataclasses import dataclass
from typing import List

# Клиенты могут записываться на сеансы только в рабочие часы мастеров.
# Клиенты могут записываться только к тем мастерам, что доступны в конкретном филиале.
# На одно время к одному мастеру может записаться только один клиент.
# Клиенты могут оставлять отзывы только при наличии записи на услугу.

# Класс Клиент (имя, адрес, номер телефона)
@dataclass
class Client:
    client_id: int
    full_name: str
    address: str
    phone: str

# Класс Мастер (имя, номер телефона, филиал в котором работает мастер, время работы)
@dataclass
class Master:
    master_id: int
    full_name: str
    phone: str
    branch_id: int
    time_job: str

# Класс Услуга (наименование, цена услуги)
@dataclass
class Service:
    service_id: int
    name: str
    price: float

# Класс Филиал (адрес)
@dataclass(frozen=True)
class Branch:
    branch_id: int
    address: str

# Класс Отзыв (текстовый отзыв, оценка по пятибальной шкале, id клиента оставившего отзыв, id записи на услугу посещённой клиентом)
@dataclass
class Review:
    review_id: int
    content: str
    rating: int
    client_id: int
    session_id: int

# Класс Запись (дата и время записи, id услуги, id клиента, id мастера)
@dataclass(frozen=True)
class Session:
    session_id: int
    date: str
    service_id: int
    client_id: int
    master_id: int


# Создаем фейковый репозиторий с данными
clients = [Client(1, "Иван Иванов", "ул. Пушкина, д.1", "+7 999 123 45 67"),
           Client(2, "Мария Петрова", "ул. Ленина, д.10", "+7 987 654 32 10"),
           Client(3, "Алексей Сидоров", "ул. Маяковского, д.5", "+7 911 222 33 44"),
           Client(4, "Елена Кузнецова", "ул. Гагарина, д.15", "+7 919 876 54 32"),
           Client(5, "Павел Новиков", "ул. Чехова, д.3", "+7 925 111 22 33")]

masters = [Master(1, "Петр Смирнов", "+7 999 111 22 33", 1, "9 - 16"),
           Master(2, "Анна Иванова", "+7 999 222 33 44", 2, "10 - 17"),
           Master(3, "Игорь Попов", "+7 999 333 44 55", 1, "8 - 15"),
           Master(4, "Наталья Зайцева", "+7 999 444 55 66", 3, "11 - 18"),
           Master(5, "Максим Львов", "+7 999 555 66 77", 2, "10 - 17")]

services = [Service(1, "Стрижка мужская", 1500.0),
            Service(2, "Стрижка бороды", 2000.0),
            Service(3, "Бритье классическое", 1000.0),
            Service(4, "Окрашивание волос", 2500.0),
            Service(5, "Массаж головы", 1800.0)]

branches = [Branch(1, "ул. Ленинградская, д.20"),
            Branch(2, "пр. Победы, д.3"),
            Branch(3, "ул. Московская, д.50")]

reviews = [Review(1, "Отличное обслуживание!", 5, 1, 1),
           Review(2, "Понравилось, всё сделали быстро", 4, 2, 3),
           Review(3, "Не очень, дорого", 2, 3, 2),
           Review(4, "Спасибо за красивую стрижку!", 5, 4, 4),
           Review(5, "Не впечатлило", 3, 5, 5)]

sessions = [Session(1, "2024-03-24 10:00", 1, 1, 1),
            Session(2, "2024-03-25 15:00", 2, 2, 2),
            Session(3, "2024-03-26 11:00", 3, 3, 3),
            Session(4, "2024-03-27 14:00", 4, 4, 4),
            Session(5, "2024-03-28 16:00", 5, 5, 5)]



def check_booking(client_id, branch_id, master_id, service_id, date):
    chosen_master = next((master for master in masters if master.master_id == master_id), None)
    chosen_branch = next((branch for branch in branches if branch.branch_id == branch_id), None)

    if not chosen_master or not chosen_branch:
        print("Неверно выбран филиал или мастер.")
        return ("Неверно выбран филиал или мастер.")

    if chosen_master.branch_id != branch_id:
        print("Мастер не работает в выбранном филиале.")
        return ("Мастер не работает в выбранном филиале.")

    # Разбиваем строку time_job на начало и конец интервала
    start_time, end_time = map(int, chosen_master.time_job.split(' - '))
    # Получаем часы из строки date
    hour = int(date.split()[1].split(':')[0])
    # Проверяем, что часы находятся в указанном интервале
    if not (start_time <= hour <= end_time):
        print("Выбранное время не соответствует рабочим часам мастера.")
        return ("Выбранное время не соответствует рабочим часам мастера.")

    if any(session.date == date for session in sessions if session.master_id == master_id):
        print("Выбранное время уже занято.")
        return ("Выбранное время уже занято.")

    new_session_id = max(session.session_id for session in sessions) + 1
    new_session = Session(new_session_id, date, service_id, client_id, master_id)
    sessions.append(new_session)
    print("Запись успешно создана.")


def leave_review(client_id, session_id, content, rating):
    if not any(session.session_id == session_id for session in sessions):
        print("Неверный идентификатор записи клиента на услугу.")
        return ("Неверный идентификатор записи клиента на услугу.")

    new_review_id = max(review.review_id for review in reviews) + 1
    new_review = Review(new_review_id, content, rating, client_id, session_id)
    reviews.append(new_review)
    print("Отзыв успешно добавлен.")
