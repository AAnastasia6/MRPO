from dataclasses import dataclass
import xml.etree.ElementTree as ET
import os
from lxml import etree
import xml.dom.minidom as minidom

# Класс Мастер (имя, номер телефона, филиал в котором работает мастер, время работы)
@dataclass
class Master:
    full_name: str
    phone: str
    branch_id: int
    time_job: str

# Класс Администратор (имя, номер телефона, филиал в котором работает админ, время работы)
@dataclass
class Administrator:
    full_name: str
    phone: str
    branch_id: int
    time_job: str

# Класс Услуга (наименование, цена услуги)
@dataclass
class Service:
    name: str
    price: int

# Класс Филиал (адрес)
@dataclass(frozen=True)
class Branch:
    address: str

# Класс Акция (название, скидка в процентах, id услуги на которую применяется скидка, id администратора создавшего акцию))
@dataclass(frozen=True)
class Promotion:
    name: str
    discount: int
    service_id: int
    administrator_id: int

#Создание файла

file_path = 'data.xml'

if not os.path.exists(file_path):
    # Создание структуры XML файла, если он не существует
    root = ET.Element('data')


    administrators = ET.SubElement(root, 'administrators')
    masters = ET.SubElement(root, 'masters')
    branchs = ET.SubElement(root, 'branchs')
    services = ET.SubElement(root, 'services')
    promotions = ET.SubElement(root, 'promotions')

    clients = ET.SubElement(root, 'clients')
    reviews = ET.SubElement(root, 'reviews')
    sessions = ET.SubElement(root, 'sessions')
    purchases = ET.SubElement(root, 'purchases')
    providers = ET.SubElement(root, 'providers')
    products = ET.SubElement(root, 'products')

    tree = ET.ElementTree(root)
    tree.write(file_path)
    print("Файл 'data.xml' успешно создан.")
else:
    print("Файл 'data.xml' уже существует.")




# Загрузка данных из XML файла
tree = ET.parse('data.xml')
root = tree.getroot()



class CheckPromotionService:
    @staticmethod
    def check_create_promotion(objectt, admin, service):

        if admin is None:
            print("Выбранный администратор не найден.")
            return False

        if service is None:
            print("Выбранная услуга не найдена.")
            return False

        if not isinstance(objectt.discount, int):
            return False
        return True


class CheckMasterService:
    @staticmethod
    def check_add_master(master):

        if master.branch_id is None:
            return False

        start, end = map(int, master.time_job.split(" - "))


        if end - start > 6:
            print("Рабочий день мастера превышает 6 часов.")
            print(f"Максимальное допустимое время работы: 6 часов. Рабочий день мастера: {end - start} часов.")
            return False

        return True

    @staticmethod
    def check_update_master(branch_master, branch_admin, new_time_job):

        if branch_master != branch_admin:
            return  False


        start, end = map(int, new_time_job.split(" - "))

        if end - start > 6:
            print("Рабочий день мастера превышает 6 часов.")
            print(f"Максимальное допустимое время работы: 6 часов. Рабочий день мастера: {end - start} часов.")
            return False

        return True

class ServiceLayer:
    @staticmethod
    def add_object(objectt, admin_id=None):
        if isinstance(objectt, Administrator):
            id=repository.get_id_new('administrator')
            repository.add_entity(objectt, 'administrator', id)

        if isinstance(objectt, Master):
            objectt.branch_id=repository.get_branch_by_administrator_master('administrator', admin_id)

            id=repository.get_id_new('master')

            if (CheckMasterService.check_add_master(objectt)):
                repository.add_entity(objectt, 'master', id)
            else:
                print("Ошибка ввода данных")

        if isinstance(objectt, Service):
            id=repository.get_id_new('service')
            repository.add_entity(objectt, 'service', id)

        if isinstance(objectt, Branch):
            id=repository.get_id_new('branch')
            repository.add_entity(objectt, 'branch', id)

        if isinstance(objectt, Promotion):
            id = repository.get_id_new('promotion')
            admin = repository.get_entiti_by_id('administrator', objectt.administrator_id)
            service = repository.get_entiti_by_id('service', objectt.service_id)
            if (CheckPromotionService.check_create_promotion(objectt, admin, service)):
                repository.add_entity(objectt, 'promotion', id)
            else:
                print("Ошибка ввода данных")

    @staticmethod
    def remove_object(object_name, id):
        repository.remove_entity(object_name, id)

    @staticmethod
    def get_all_object(object_name):
        print(repository.get_all_entities(object_name))

    @staticmethod
    def get_promotions(admin_id):
        print(repository.get_promotions_by_administrator_id(admin_id))

    @staticmethod
    def update_master_time_job(admin_id, master_id, new_time_job):
        branch_master = repository.get_branch_by_administrator_master('master', master_id)
        branch_admin = repository.get_branch_by_administrator_master('administrator', admin_id)
        if (CheckMasterService.check_update_master(branch_master, branch_admin, new_time_job)):
            repository.update_master_time_job(master_id,new_time_job)



class XMLRepository:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = ET.parse(file_path)
        self.root = self.data.getroot()

    def get_id_new(self, entity_name):
        # Нахождение максимального id для элементов
        max_id = 0
        for entiti in self.root.findall(f'.//{entity_name}'):
            entiti_id = int(entiti.attrib.get('id', 0))
            max_id = max(max_id, entiti_id)

        print(f"Максимальный id для элементов: {max_id}")
        return max_id+1

    def add_entity(self, entity, entity_type, id):
        parent_element = self.root.find(entity_type + "s")

        new_entity = ET.SubElement(parent_element, entity_type)
        new_entity.set('id', str(id))

        for prop, value in vars(entity).items():
            if not prop.startswith("_"):
                ET.SubElement(new_entity, prop).text = str(value)

        self.indent(self.data.getroot())  # Форматирование XML
        self.data.write(self.file_path)  # Сохранение изменений в файл

        print(f"{entity_type.capitalize()} успешно добавлен.")

    def remove_entity(self, entity_type, id):
        parent_element = self.root.find(entity_type + "s")

        for element in parent_element.findall(entity_type):
            if element.get("id") == str(id):
                parent_element.remove(element)
                self.indent(self.data.getroot())
                self.data.write(self.file_path)
                print(f"{entity_type.capitalize()} с id {id} успешно удален.")
                return

        print(f"{entity_type.capitalize()} с id {id} не найден.")

    def get_entiti_by_id(self, entiti_name, id):
        for entiti in root.findall(f'.//{entiti_name}'):
            if entiti.attrib.get('id') == str(id):
                return entiti



    def get_branch_by_administrator_master(self, entit_name, entiti_id):
        for admin in root.findall(f'.//{entit_name}'):
            if admin.attrib.get('id') == str(entiti_id):
                result = admin

        if result is not None:
            branch_id = result.find('branch_id').text
            print(f"Branch ID: {branch_id}")
            return branch_id
        else:
            print("Администратор не найден.")

    def get_all_entities(self, entity_type):
        parent_element = self.root.find(entity_type + "s")
        entities = []

        for element in parent_element.findall(entity_type):
            entity_data = {}
            entity_data["id"] = element.get("id")
            for child in element:
                entity_data[child.tag] = child.text
            entities.append(entity_data)

        return entities

    def get_promotions_by_administrator_id(self, administrator_id):
        promotions_element = self.root.find("promotions")
        promotions = []

        for promotion in promotions_element.findall("promotion"):
            if promotion.find("administrator_id").text == str(administrator_id):
                promotion_data = {}
                promotion_data["id"] = promotion.get("id")
                for child in promotion:
                    promotion_data[child.tag] = child.text
                promotions.append(promotion_data)

        return promotions

    def update_master_time_job(self, master_id, new_time_job):
        masters_element = self.root.find("masters")

        for master in masters_element.findall("master"):
            if master.get("id") == str(master_id):
                time_job_element = master.find("time_job")
                time_job_element.text = new_time_job
                self.indent(self.data.getroot())
                self.data.write(self.file_path)
                print(f"Рабочие часы мастера с id {master_id} успешно обновлены.")
                return

        print(f"Мастер с id {master_id} не найден.")

    def indent(self, elem, level=0):
        indent = "\n" + level * "    "
        if len(elem):
            if not elem.text or not elem.text.strip():
                elem.text = indent + "    "
            if not elem.tail or not elem.tail.strip():
                elem.tail = indent
            for child in elem:
                self.indent(child, level + 1)
            if not elem.tail or not elem.tail.strip():
                elem.tail = indent
        else:
            if level and (not elem.tail or not elem.tail.strip()):
                elem.tail = indent



# Инициализация репозитория
repository = XMLRepository('data.xml')

# master = Master(full_name="Petrov Petr", phone="987-654-321", branch_id=None, time_job="9 - 15")
# ServiceLayer.add_object(objectt=master, admin_id = 2)

# administrator = Administrator(full_name="Ivanov Ivan", phone="123-456-789", branch_id=1, time_job="9-16")
# ServiceLayer.add_object(administrator)


# service = Service(name="Strishka", price=500)
# ServiceLayer.add_object(service)

#
# branch = Branch(address="Mira, 25")
# ServiceLayer.add_object(branch)


# promotion = Promotion(name="Sale on Strishka", discount=10, service_id=1, administrator_id=2)
# ServiceLayer.add_object(promotion)


# ServiceLayer.remove_object('branch', 1)

# ServiceLayer.get_all_object("service")

# ServiceLayer.get_promotions(1)

# ServiceLayer.update_master_time_job(admin_id=1, master_id=1, new_time_job='10 - 15')
