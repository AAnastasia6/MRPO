from dataclasses import dataclass
import xml.etree.ElementTree as ET
import os


# Определение классов данных
@dataclass
class Client:
    full_name: str
    address: str
    phone: str

@dataclass
class Master:
    full_name: str
    phone: str
    branch_id: int
    time_job: str

@dataclass
class Service:
    name: str
    price: int

@dataclass(frozen=True)
class Branch:
    address: str


@dataclass
class Review:
    content: str
    rating: int
    client_id: int
    master_id: int

@dataclass(frozen=True)
class Session:
    date: str
    service_id: int
    client_id: int
    master_id: int
    branch_id:int


#Создание файла

file_path = 'data.xml'

if not os.path.exists(file_path):
    # Создание структуры XML файла, если он не существует
    root = ET.Element('data')

    clients = ET.SubElement(root, 'clients')
    masters = ET.SubElement(root, 'masters')
    branchs = ET.SubElement(root, 'branchs')
    services = ET.SubElement(root, 'services')
    reviews = ET.SubElement(root, 'reviews')
    sessions = ET.SubElement(root, 'sessions')

    promotions = ET.SubElement(root, 'promotions')
    administrators = ET.SubElement(root, 'administrators')
    purchases = ET.SubElement(root, 'purchases')
    providers = ET.SubElement(root, 'providers')
    products = ET.SubElement(root, 'products')

    tree = ET.ElementTree(root)
    tree.write(file_path)
    print("Файл 'data.xml' успешно создан.")
else:
    print("Файл 'data.xml' уже существует.")




# Загрузка данных из XML файла
tree = ET.parse('data.xml')
root = tree.getroot()


class SessionService:
    @staticmethod
    def check_booking(session, master_time_job, branch_master, session_is_empty):

        if session_is_empty is not None:
            print("Данное врея записи занято")
            return False

        if session.branch_id != branch_master:
            print("Мастер не работает в выбранном филиале")
            return False

        # Разбиваем строку time_job на начало и конец интервала
        start_time, end_time = map(int, master_time_job.split(' - '))
        # Получаем часы из строки date
        hour = int(session.date.split()[1].split(':')[0])
        # Проверяем, что часы находятся в указанном интервале
        if not (start_time <= hour <= end_time):
            print("Выбранное время не соответствует рабочим часам мастера.")
            return False

        return True

class ReviewService:
    @staticmethod
    def leave_review(review, session):
        if session is None:
            print("Запись или отзыв не найдены")
            return False

        if isinstance(review.rating, int):  # Проверяем, что review является числом
            review_raiting = int(review.rating)  # Преобразуем review в целое число
            if 1 <= review_raiting <= 5:
                return True
            else:
                print("Неверный формат оценки")
                return False
        else:
            print("Неверный формат оценки")
            return False

        return True

    @staticmethod
    def update_review(rating, review):
        if review is None:
            print("Запись или отзыв не найдены")
            return False

        if isinstance(rating, int):  # Проверяем, что review является числом
            review_raiting = int(rating)  # Преобразуем review в целое число
            if 1 <= review_raiting <= 5:
                return True
            else:
                print("Неверный формат оценки")
                return False
        else:
            print("Неверный формат оценки")
            return False

        return True

class ServiceLayer:
    @staticmethod
    def add_object(objectt):

        if isinstance(objectt, Client):
            id = repository.get_id_new('client')
            repository.add_entity(objectt, 'client', id)

        if isinstance(objectt, Review):
            id = repository.get_id_new('review')
            session = repository.get_session_by_client_master(objectt)
            if ReviewService.leave_review(objectt, session):
                repository.add_entity(objectt, 'review', id)
            else:
                print("Ошибка ввода данных")

        if isinstance(objectt, Service):
            id=repository.get_id_new('service')
            repository.add_entity(objectt, 'service', id)

        if isinstance(objectt, Branch):
            id=repository.get_id_new('branch')
            repository.add_entity(objectt, 'branch', id)

        if isinstance(objectt, Session):
            id = repository.get_id_new('session')
            master_time_job = repository.get_master_time_job(objectt.master_id)
            branch_master = repository.get_branch_by_administrator_master('master', objectt.master_id)
            session_is_empty = repository.check_session_by_date(objectt.date)
            if SessionService.check_booking(objectt, master_time_job, branch_master, session_is_empty):
                repository.add_entity(objectt, 'session', id)
            else:
                print("Ошибка ввода данных")

    @staticmethod
    def remove_object(object_name, id):
        repository.remove_entity(object_name, id)

    @staticmethod
    def get_all_object(object_name):
        print(repository.get_all_entities(object_name))

    @staticmethod
    def update_rewiew(review_id, new_raiting=None, new_content=None):
        review= repository.get_entiti_by_id('review', review_id)
        if ReviewService.update_review(new_raiting, review):
            repository.update_rewiew_by_id(review_id, new_raiting, new_content)






class XMLRepository:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = ET.parse(file_path)
        self.root = self.data.getroot()

    def get_id_new(self, entity_name):
        # Нахождение максимального id для элементов
        max_id = 0
        for entiti in self.root.findall(f'.//{entity_name}'):
            entiti_id = int(entiti.attrib.get('id', 0))
            max_id = max(max_id, entiti_id)

        print(f"Максимальный id для элементов: {max_id}")
        return max_id+1

    def add_entity(self, entity, entity_type, id):
        parent_element = self.root.find(entity_type + "s")

        new_entity = ET.SubElement(parent_element, entity_type)
        new_entity.set('id', str(id))

        for prop, value in vars(entity).items():
            if not prop.startswith("_"):
                ET.SubElement(new_entity, prop).text = str(value)

        self.indent(self.data.getroot())  # Форматирование XML
        self.data.write(self.file_path)  # Сохранение изменений в файл

        print(f"{entity_type.capitalize()} успешно добавлен.")

    def remove_entity(self, entity_type, id):
        parent_element = self.root.find(entity_type + "s")

        for element in parent_element.findall(entity_type):
            if element.get("id") == str(id):
                parent_element.remove(element)
                self.indent(self.data.getroot())
                self.data.write(self.file_path)
                print(f"{entity_type.capitalize()} с id {id} успешно удален.")
                return

        print(f"{entity_type.capitalize()} с id {id} не найден.")

    def get_entiti_by_id(self, entiti_name, id):
        for entiti in root.findall(f'.//{entiti_name}'):
            if entiti.attrib.get('id') == str(id):
                return entiti

    def get_branch_by_administrator_master(self, entit_name, entiti_id):
        for entiti in root.findall(f'.//{entit_name}'):
            if entiti.attrib.get('id') == str(entiti_id):
                result = entiti

        if result is not None:
            branch_id = int(result.find('branch_id').text)
            print(f"Branch ID: {branch_id}")
            return branch_id
        else:
            print("Администратор не найден.")

    def get_all_entities(self, entity_type):
        parent_element = self.root.find(entity_type + "s")
        entities = []

        for element in parent_element.findall(entity_type):
            entity_data = {}
            entity_data["id"] = element.get("id")
            for child in element:
                entity_data[child.tag] = child.text
            entities.append(entity_data)

        return entities

    def get_master_time_job(self, master_id):
        for master in root.findall('.//master'):
            if master.attrib.get('id') == str(master_id):
                result = master

        if result is not None:
            time_job = result.find('time_job').text
            print(f"time_job: {time_job}")
            return time_job
        else:
            print("Мастер не найден.")

    def get_session_by_client_master(self, object):
        for session in root.findall('.//session'):
            client_element = session.find('client_id')
            master_element = session.find('master_id')
            if client_element.text == str(object.client_id) and master_element.text == str(object.master_id):
                return session
        print("Сессия для указанных client_id и master_id не найдена")

    def check_session_by_date(self, date_session):
        for session in root.findall('.//session'):
            date_element = session.find('date')
            if date_element.text == date_session:
                # print(date_element.text)
                return  date_element
            else:
                print("Данные дата и время записи свободны")

    def update_rewiew_by_id(self, review_id, new_rating=None, new_content=None):
        review_element = self.root.find("reviews")
        for review in review_element.findall("review"):
            if review.get('id') == str(review_id):
                if new_rating is not None:
                    rating_element = review.find('rating')
                    rating_element.text = str(new_rating)
                if new_content is not None:
                    content_element = review.find('content')
                    content_element.text = new_content
                self.indent(self.data.getroot())
                self.data.write(self.file_path)
                print(f"Данные успешно обновлены")
                return

    def indent(self, elem, level=0):
        indent = "\n" + level * "    "
        if len(elem):
            if not elem.text or not elem.text.strip():
                elem.text = indent + "    "
            if not elem.tail or not elem.tail.strip():
                elem.tail = indent
            for child in elem:
                self.indent(child, level + 1)
            if not elem.tail or not elem.tail.strip():
                elem.tail = indent
        else:
            if level and (not elem.tail or not elem.tail.strip()):
                elem.tail = indent

# Инициализация репозитория
repository = XMLRepository('data.xml')




# client = Client(full_name="Ivanov Ivan", address="Mira, 28", phone="123-456-789")
# ServiceLayer.add_object(client)


# service = Service(name="Strishka", price=500)
# ServiceLayer.add_object(service)


# branch = Branch(address="Mira, 25")
# ServiceLayer.add_object(branch)

# session = Session(date="2024-04-10 17:00", service_id=1, client_id=1, master_id=1, branch_id=1)
# ServiceLayer.add_object(session)

# review = Review(content="Good service!", rating=4, client_id=1, master_id=1)
# ServiceLayer.add_object(review)




# ServiceLayer.remove_object('branch', 1)

# ServiceLayer.get_all_object("service")

ServiceLayer.update_rewiew(1, 4, "Good!")




