from fastapi import FastAPI, HTTPException
from Client_6 import *
from typing import List

app = FastAPI()

@app.get("/services/", response_model=List[Service])
async def get_all_services():
    services = ServiceLayer.get_all_object('service')
    if services:
        return services
    else:
        raise HTTPException(status_code=404, detail="Услуги не найдены")

@app.get("/branches/", response_model=List[Branch])
async def get_all_branches():
    branches = ServiceLayer.get_all_object('branch')
    if branches:
        return branches
    else:
        raise HTTPException(status_code=404, detail="Филиалы не найдены")

@app.get("/sessions/", response_model=List[Session])
async def get_all_sessions_by_client(id : int):
    sessions = ServiceLayer.get_all_session_by_client(id)
    if sessions:
        return sessions
    else:
        raise HTTPException(status_code=404, detail="Записи не найдены")

@app.post("/session/")
async def create_session(session: Session):
    if ServiceLayer.add_object(session):
        return {"msg": "Запись успешно добавлена"}
    else:
        raise HTTPException(status_code=422, detail="Ошибка ввода данных")

@app.post("/review/")
async def create_review(review: Review):
    if ServiceLayer.add_object(review):
        return {"msg": "Отзыв успешно добавлен"}
    else:
        raise HTTPException(status_code=422, detail="Ошибка ввода данных")

@app.patch("/review/{review_id}")
async def update_review(id: int, raiting: int = None, content = None):
    result = ServiceLayer.update_rewiew(review_id=id, new_raiting=raiting, new_content=content)
    if result == True:
        return {"msg": "Отзыв успешно обновлён"}
    elif result == "Отзыв не найден":
        raise HTTPException(status_code=404, detail="Отзыв не найден")
    else:
        raise HTTPException(status_code=422, detail="Ошибка ввода данных")

@app.delete("/review/{review_id}")
async def delete_review(review_id: int):
    if not ServiceLayer.remove_object('review', review_id) :
        raise HTTPException(status_code=404, detail="Отзыв не найден")
    else:
        return {"msg": "Отзыв успешно удален"}

@app.delete("/session/{session_id}")
async def delete_session(session_id: int):
    if not ServiceLayer.remove_object('session', session_id) :
        raise HTTPException(status_code=404, detail="Запись не найдена")
    else:
        return {"msg": "Запись успешно удалена"}
