from fastapi import FastAPI, HTTPException
from Admin_6 import *
from typing import List

app = FastAPI()

@app.post("/service/")
async def create_service(service: Service):
    ServiceLayer.add_object(service)
    return {"msg": "Услуга успешно добавлена"}


@app.delete("/service/{service_id}")
async def delete_service(service_id: int):
    if not ServiceLayer.remove_object('service', service_id) :
        raise HTTPException(status_code=404, detail="Услуга не найдена")
    else:
        return {"msg": "Услуга успешно удалена"}

@app.get("/services/", response_model=List[Service])
async def get_all_services():
    services = ServiceLayer.get_all_object('service')
    if services:
        return services
    else:
        raise HTTPException(status_code=404, detail="Услуги не найдены")

@app.get("/masters/", response_model=List[Master])
async def get_all_masters():
    masters = ServiceLayer.get_all_object('master')
    if masters:
        return masters
    else:
        raise HTTPException(status_code=404, detail="Мастера не найдены")

@app.post("/master/")
async def create_master(master: Master, admin_id):
    if ServiceLayer.add_object(master, admin_id):
        return {"msg": "Мастер успешно добавлен"}
    else:
        raise HTTPException(status_code=422, detail="Ошибка ввода данных")

@app.delete("/master/{master_id}")
async def delete_master(master_id: int):
    if not ServiceLayer.remove_object('master', master_id) :
        raise HTTPException(status_code=404, detail="Мастер не найден")
    else:
        return {"msg": "Мастер успешно удален"}

@app.get("/promotions/", response_model=List[Promotion])
async def get_all_promotions_by_admin(admin_id: int):
    promotions = ServiceLayer.get_promotions(admin_id)
    if promotions:
        return promotions
    else:
        raise HTTPException(status_code=404, detail="Акции не найдены")

@app.post("/promotion/")
async def create_promotion(promotion: Promotion):
    if ServiceLayer.add_object(promotion):
        return {"msg": "Акция успешно добавлена"}
    else:
        raise HTTPException(status_code=422, detail="Ошибка ввода данных: услуга не найдены")

@app.delete("/promotion/{promotion_id}")
async def delete_promotion(promotion_id: int):
    if not ServiceLayer.remove_object('promotion', promotion_id) :
        raise HTTPException(status_code=404, detail="Акция не найдена")
    else:
        return {"msg": "Акция успешно удалена"}

@app.patch("/masters/{master_id}")
async def update_master(master_id: int, admin_id: int, new_time_job):
    result = ServiceLayer.update_master_time_job(admin_id, master_id, new_time_job)
    if result == True:
        return {"msg": "Время работы мастера успешно обновлено"}
    elif result == "Мастер не найден":
        raise HTTPException(status_code=404, detail="Мастер не найден")
    elif result == "Администратор не найден":
        raise HTTPException(status_code=404, detail="Администратор не найден")
    else:
        raise HTTPException(status_code=422, detail="Ошибка ввода данных")

